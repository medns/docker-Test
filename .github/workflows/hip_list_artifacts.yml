name: '[hip] list artifacts'

on:
  workflow_dispatch:
    inputs:
      hip_domain:
        description: 'HIP <domain>'
        type: choice
        options:
        - hippy
        - test
        default: 'hippy'
        required: true
      hip_path:
        description: 'HIP <path>(without domain)'
        type: string

jobs:
  list_artifacts:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Prepare Path
      id: prepare-path
      run: |
        path=${{ github.event.inputs.hip_domain }}/${{ github.event.inputs.hip_path }}
        echo "::set-output name=path::$path"
        if [[ $path == */ ]] || [[ $path == *\\ ]]; then
          echo "::set-output name=is-directory::1"
        fi
    - name: Install Requirement
      run: |
        if [ "${{steps.prepare-path.outputs.is-directory}}" == "1" ]; then
          pip install coscmd
          coscmd config -a ${{ secrets.TC_SECRET_ID }} -s ${{ secrets.TC_SECRET_KEY }} -b ${{ secrets.COS_BUCKET }} -r ${{ secrets.COS_REGION }}
        else
          pip install -U cos-python-sdk-v5
        fi
    - name: List artifact
      if: ${{ steps.prepare-path.outputs.is-directory == '1' }}
      run: |
        coscmd list ${{ steps.prepare-path.outputs.path }} -ar >> $GITHUB_STEP_SUMMARY 2>&1
    - name: Info artifact
      if: ${{ steps.prepare-path.outputs.is-directory != '1' }}
      shell: python
      run: |
        from qcloud_cos import CosConfig, CosS3Client, CosS3Auth

        def get_object_tagging(self, Bucket, Key, headers = {}):
          params = {
            'tagging': ''
          }
          if 'versionId' in headers:
              params['versionId'] = headers['versionId']
              del headers['versionId']
          url = self._conf.uri(bucket=Bucket, path=Key)
          rt = self.send_request(
              method='GET',
              url=url,
              bucket=Bucket,
              auth=CosS3Auth(self._conf, Key, params=params),
              headers=headers,
              params=params)
          return dict(**rt.headers)
        
        CosS3Client.get_object_tagging = get_object_tagging

        config = CosConfig(Region="${{ secrets.COS_REGION }}", SecretId="${{ secrets.TC_SECRET_ID }}", SecretKey="${{ secrets.TC_SECRET_KEY }}")
        client = CosS3Client(config)

        response = client.get_object_tagging(
            Bucket="${{ secrets.COS_BUCKET }}",
            Key="${{ steps.prepare-path.outputs.path }}"
        )
        print(response)
