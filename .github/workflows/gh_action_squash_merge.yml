name: '[gh] action squash merge'

on:
  pull_request_target:
    branches:
      - master
      - main
      - v3.0-dev
      - v3.0
    types:
      - labeled

jobs:
  check_pull_request_title:
    if: github.event.label.name == 'action(squash-merge)'
    runs-on: ubuntu-latest
    outputs:
      failed_result: ${{ steps.commitlint.outputs.failed_result }}
    steps:
    - name: Checkout
      if: github.event.pull_request.commits > 1
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup
      if: github.event.pull_request.commits > 1
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'
        cache-dependency-path: package-lock.json
    - name: Install
      if: github.event.pull_request.commits > 1
      run: |
        npm install commitlint-plugin-function-rules@1.6.0 @commitlint/cli@16.2.1 @commitlint/config-conventional@16.2.1 @commitlint/lint@16.2.1 @commitlint/prompt-cli@16.2.1
    - name: Commitlint
      id: commitlint
      env:
        PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
      shell: bash {0}
      run: |
        if [ ${{ github.event.pull_request.commits }} -gt 1 ]; then
          result=`echo $PULL_REQUEST_TITLE | npx commitlint -c false`
          if [ $? -ne 0 ]; then
            if [ -z $result ]; then
              echo "failed_result=(empty response)" >> $GITHUB_OUTPUT
            else
              echo "failed_result<<EOF" >> $GITHUB_OUTPUT
              echo "$result" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          fi
        fi
        exit 0

  squash_merge_action:
    needs: [ check_pull_request_title ]
    if: github.event.label.name == 'action(squash-merge)'
    runs-on: ubuntu-latest
    steps:
    - name: Squash
      id: squash
      if: ${{ !needs.check_pull_request_title.outputs.failed_result }}
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash {0}
      run: |
        result=`gh pr merge ${{ github.event.pull_requests.number }} --squash --auto --match-head-commit ${{ github.event.pull_request.head.sha }} --repo $GITHUB_REPOSITORY`
        if [ $? -ne 0 ]; then
            if [ -z $result ]; then
              echo "failed_result=(empty response)" >> $GITHUB_OUTPUT
            else
              echo "failed_result<<EOF" >> $GITHUB_OUTPUT
              echo "$result" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
        fi
        exit 0
    - name: Comment
      uses: actions/github-script@v6.3.3
      env:
        SQUASH_RESULT: ${{ steps.squash.outputs.failed_result }}
        CHECK_RESULT: ${{ needs.check_pull_request_title.outputs.failed_result }}
        FAILED_MESSAGE: |
          `squash-merge` action execution failed, because of **%s**.

          Please check the following details:
          <details>%s</details>
      with:
        script: |
          const { pull_request } = context.payload;
          const { issues } = github.rest;
          const util = require('util');
          
          let body;
          if (!process.env.CHECK_RESULT) {
            body = util.format(process.env.FAILED_MESSAGE, 'pull request title does not meet the [Convention Commit](https://conventionalcommits.org/) guideline', process.env.CHECK_RESULT);
          } else if (!process.env.SQUASH_RESULT) {
            body = util.format(process.env.FAILED_MESSAGE, 'enable squash and merge failed', process.env.SQUASH_RESULT);
          }

          const p = [];
          p.push(issues.removeLabel({
            issue_number: pull_request.number,
            name: 'action(squash-merge)',
            ...context.repo,
          }).catch(e => {
            console.log('issues.removeLabel', e);
          }));
          if (body) {
            p.push(issues.createComment({
              issue_number: pull_request.number,
              body: body,
              ...context.repo
            }));
            p.push(issues.addLabels({
              issue_number: pull_request.number,
              labels: [ 'action(squash-merge): f' ],
              ...context.repo
            })); 
          }
          await Promise.all(p);
