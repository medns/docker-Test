name: '[hip] archive artifacts'

on:
  workflow_dispatch:
    inputs:
      source_type:
        description: 'Type of source'
        type: choice
        options:
        - Git
        - URL
        default: 'Git'
        required: true
      source_url:
        description: 'URL or Git <repository>'
        type: string
        required: true
      git_revision:
        description: 'Git <tag>|<branch>, only Git available'
        type: string
      hip_domain:
        description: 'HIP <domain>'
        type: choice
        options:
        - hippy
        default: 'hippy'
        required: true
      hip_artifact_path:
        description: 'HIP artifact <path>(without domain)'
        type: string
        required: true

jobs:
  archive_objects:
    runs-on: ubuntu-latest
    steps:
    - name: Git clone
      if: github.event.inputs.source_type == 'Git'
      id: git-clone
      shell: bash
      run: |
        name=$(basename ${{ github.event.inputs.hip_artifact_path }})
        if [[ $name != *.tgz ]]; then
          echo 'In `Git` source type, <hip_artifact_path> must be end with |.tgz|'
          exit -1
        fi
        git clone --depth 1 -b ${{ github.event.inputs.git_revision }} ${{ github.event.inputs.source_url }} artifact
        tar -zcvf $name -C artifact .
        cd artifact
        echo "::set-output name=git-head::$(git rev-parse HEAD)"
    - name: URL fetch
      if: github.event.inputs.source_type == 'URL'
      shell: bash
      run: |
        curl -o $(basename ${{ github.event.inputs.hip_artifact_path }}) ${{ github.event.inputs.source_url }}
    - name: Install Requirement 
      shell: bash
      run: |
        pip install -U cos-python-sdk-v5
    - name: Publish artifacts
      shell: python
      run: |
        from qcloud_cos import CosConfig
        from qcloud_cos import CosS3Client
        import json
        import hashlib
        import os

        artifact = os.path.basename("${{ github.event.inputs.hip_artifact_path }}")

        metadata = {}
        metadata["ci-name"] = "Github Action"
        metadata["ci-id"] = "${{ github.run_id }}"
        metadata["source-type"] = "${{ github.event.inputs.source_type }}"
        metadata["source-url"] = "${{ github.event.inputs.source_url }}"
        metadata["artifact-publisher"] = "${{ github.event.sender.login }}"
        with open(artifact, "rb") as artifact_file:
          metadata["artifact-md5"] = hashlib.md5(artifact_file.read()).hexdigest()
        ${{ github.event.inputs.source_type == 'Git' && 'metadata["git-revision"] = "${{ github.event.inputs.git_revision }}' || '' }}
        ${{ github.event.inputs.source_type == 'Git' && 'metadata["git-head"] = "${{ steps.git-clone.git-head }}' || '' }}

        metadata = {"x-cos-meta-" + k: v for k, v in metadata.items()}

        config = CosConfig(Region="${{ secrets.COS_REGION }}", SecretId="${{ secrets.TC_SECRET_ID }}", SecretKey="${{ secrets.TC_SECRET_KEY }}")
        client = CosS3Client(config)
        response = client.upload_file(
            Bucket="${{ secrets.COS_BUCKET }}",
            Key="${{ github.event.inputs.hip_domain }}/${{ github.event.inputs.hip_artifact_path }}",
            LocalFilePath=artifact,
            EnableMD5=False,
            Metadata=metadata
        )
        print("ETag: " + response["ETag"])
    