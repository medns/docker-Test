name: '[gh] pull review test'

on:
  workflow_dispatch:

jobs:
  review_notification:
    runs-on: ubuntu-latest
    steps:
    - name: Notice
      uses: actions/github-script@v6.3.3
      env:
        WECHAT_WORK_USERS: ${{ secrets.WECHAT_WORK_USERS }}
      with:
        script: |
          const { pulls } = github.rest;
          const os = require('os');

          const pull_requests = await github.paginate(pulls.list, {
            per_page: 100,
            state: 'open',
            ...context.repo
          });

          const { data: requested_reviewers } = await Promise.all(
            pull_requests.map(
              pull => pulls.listRequestedReviewers({
                per_page: 100,
                pull_number: pull.number,
                ...context.repo
              })
            )
          );
          
          if (pull_requests.length !== requested_reviewers.length) {
            throw new Error("The length of pull_requests and requested_reviewers is not equal");
          }

          const wechat_work_users = JSON.parse(process.env.WECHAT_WORK_USERS);
          const notification_users = {};

          pull_requests.forEach((pull, index) => {
            requested_reviewers[index].users.forEach(reviewer => {
              console.log(pull.number, reviewer.login);
              if (reviewer.type === 'User') {
                const user_id = wechat_work_users[review.login];
                if (user_id) {
                  (notification_users[user_id] ||= []).push(pull);
                }
              }
            });
          });

          return;
          await Promise.all(Object.entries(notification_users).map(([user_id, pulls]) => {
            const content = `${pulls.length} pull requests are awaiting your review:${os.EOL}` + pulls.map(pull => `* [#${pull.number}](${pull.html_url}) ${pull.title}`).join(os.EOL);

            return github.request("POST ${{ secrets.WECHAT_WORK_BOT_WEBHOOK }}", {
              headers: {
                "content-type": "application/json"
              },
              data: {
                chatid: "${{ secrets.WECHAT_WORK_CHAT_ID }}",
                visible_to_user: user_id,
                msgtype: "markdown",
                markdown: {
                  content: content
                }
              }
            });
          }));