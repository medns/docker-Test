name: '[gh] webhook retrier'

on:
  workflow_dispatch:
  schedule:
    # Run every 30th minute.
    - cron: '*/30 * * * *'

jobs:
  webhook_retrier:
    runs-on: ubuntu-latest
    steps:
    - name: Action
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.BOT_PAT }}
        script: |
          const { repos } = github.rest;
          const os = require('os');
          const fs = require('fs');

          const per_page = 100;

          const hooks = await (github.paginate(repos.listWebhooks, {
            per_page,
            ...context.repo
          })).filter((hook) => hook.last_response && hook.active);

          const retried_deliveries = (await Promise.all(hooks.map((hook) => repos.listWebhookDeliveries({
            per_page,
            ...context.repo,
            hook_id: hook.id
          })))).map((deliveries) => {
            const guid_indexed = {};
            const retried_deliveries = [];
            deliveries.forEach((delivery) => {
              (guid_indexed[delivery.guid] ||= []).push(delivery);
              if (delivery.status_code >= 400) {
                retried_deliveries.push(delivery);
              }
            });

            return retried_deliveries.filter(({ guid }) => {
              const all_deliveries = guid_indexed[guid];
              return all_deliveries.every((delivery) => delivery.status_code >= 400) && all_deliveries.length <= 4; // maximum attempts(origin included)
            });
          });


          (await retried_deliveries.map((deliveries, hooks_index) =>
            Promise.allSettled(deliveries.map((delivery) =>
              repos.redeliverWebhookDelivery({
                ...context.repo,
                hook_id: hooks[hooks_index].id,
                delivery_id: delivery.id
              })
            ))
          )).forEach((results, hooks_index) => {
            if (results.length > 0) {
              const summary = [];

              const hook = hooks[hooks_index];
              summary.push(`## ${hook.config.url} (#${hook.id})`);
              summary.push('| guid | event | action | result |');
              summary.push('| ---- | ----- | ------ | ------ |');
              results.forEach((result, deliveries_index) => {
                const delivery = retried_deliveries[hooks_index][deliveries_index];
                summary.push(`| ${delivery.guid} | ${delivery.event} | ${delivery.action} | ${result.status} |`);
              });
              summary.push('');

              fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary.join(os.EOL), { encoding: 'utf8' });
            }
          });
