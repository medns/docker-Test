name: '[gh] issue crash report'

on: 
  issues:
    types:
      - opened

env:
  greetings_message: |
    ðŸ™‡ Your cooperation is apologize for any inconvenience.

    Don\'t worry about it, our collaborators will handle it asap.

    If you have any additional information, you can add a new comment in this issue.
  translates_addresses_message: |
    ðŸ¤–: "I will try to translates addresses to human readable format, please wait a moment."
  fetch_symbol_failed_message: |
    ðŸ¤–: "I have searched the artifacts store database, but found no artifacts with version %s and %s architecture."
  no_backtrace_message: |
    ðŸ¤–: "It looks like there is no backtrace addresses in the crash log that needs to be translated."
  translate_success_message: |
    ðŸ¤–: "After my translation, the result is as follows."
    ```
    %s
    ```

jobs:
  triage:
    if: startsWith(github.event.issue.title, '[Crash]')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.triage-result.outputs.version }}
      platform: ${{ steps.triage-result.outputs.platform }}
      architecture: ${{ steps.triage-result.outputs.architecture }}
      logs: ${{ steps.triage-result.outputs.logs }}
      setps: ${{ steps.triage-result.outputs.setps }}
      additional: ${{ steps.triage-result.outputs.additional }}
      repository_owner: ${{ steps.triage-result.outputs.repository_owner }}
    steps:
    - uses: actions/setup-node@v3.4.1
    - run: npm install markdown-it
    - name: Greetings
      uses: actions/github-script@v6.1.0
      with:
        script: |
          const { owner, repo } = context.repo;
          const { issues } = github.rest;

          await issues.createComment({
            owner,
            repo,
            issue_number: ${{ github.event.issue.number }},
            body: process.env.greetings_message
          });
    - name: Triage
      id: triage-result
      uses: actions/github-script@v6.1.0
      with:
        script: |
          const MarkdownIt = require('markdown-it');
          const os = require('os');
          const path = require('path');

          function parse(markdown) {
            const tokens = (new MarkdownIt()).parse(markdown);
            const result = {};
            let location = 'void';
            let key = [];
            let value = [];
            tokens.forEach((token, index) => {
              switch (token.type) {
                case 'heading_open': {
                  if (key.length > 0) {
                    result[key.join(os.EOL)] = value.join(os.EOL);
                  }
                  key = [];
                  value = [];
                  location = 'heading';
                  break;
                }
                case 'heading_close': {
                  location = 'void';
                  break;
                }
                case 'paragraph_open': {
                  location = 'paragraph';
                  break;
                }
                case 'paragraph_close': {
                  location = 'void';
                  break;
                }
                case 'inline': {
                  switch (location) {
                    case 'heading': {
                      key.push(token.content);
                      break;
                    }
                    case 'paragraph': {
                      value.push(token.content);
                      break;
                    }
                  }
                  break;
                }
              }
              if (index === tokens.length - 1) {
                result[key.join(os.EOL)] = value.join(os.EOL);
              }
            });
            return result;
          }

          const info = parse(`${{ github.event.issue.body }}`);
          ['Version', 'Platform', 'Architecture', 'Logs', 'Steps', 'Additional'].forEach(key => {
            const value = info[key];
            if (value) {
              if (['Version', 'Platform', 'Architecture'].includes(key)) {
                value = value.replaceAll(/[^0-9a-z\-_]/ig, '');
              }
              console.log(`::set-output name=${key.toLowerCase()}::${value}`);
            }
          });

          console.log(`::set-output name=repository_owner::${'${{ github.repository_owner }}'.toLowerCase()}`);

  android-translates-addresses:
    needs:
      - triage
    if: needs.triage.outputs.platform == 'Android'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ needs.triage.outputs.repository_owner }}/android-release:latest
    steps:
    - name: Backtrace
      id: backtrace_parsed
      uses: actions/github-script@v6.1.0
      with:
        script: |
          const { owner, repo } = context.repo;
          const { issues } = github.rest;

          function parse(log) {
            const stack = [];
            for (const [_, pc, file, func] of log.matchAll(/#[0-9]+\s+pc\s+([0-9a-f]{8,16})\s+([^\s]+)(?:\s+\(([^\+]+\+[0-9]+)\))*/ig)) {
              stack.push({pc, func, file});
            }
            return stack;
          }

          const backtrace = parse('${{ needs.triage.outputs.logs }}');
          if (backtrace.length > 0) {
            console.log(`::set-output name=backtrace::${JSON.stringify(backtrace)}`);
          }

          await issues.createComment({
            owner,
            repo,
            issue_number: ${{ github.event.issue.number }},
            body: process.env[backtrace.length > 0 ? 'translates_addresses_message' : 'no_backtrace_message']
          });
    - name: Symbols
      if: steps.backtrace_parsed.outputs.backtrace
      run: |
        mkdir symbols
        ZIP_FILE="${{ needs.triage.outputs.architecture }}.zip"
        curl -O https://artifacts-store.openhippy.com/hippy/android/hippy-common/${{ needs.triage.outputs.version }}/symbols/$ZIP_FILE
        unzip $ZIP_FILE symbols
        rm $ZIP_FILE
    - uses: actions/github-script@v6.1.0
      if: failure()
      with:
        script: |
          const { owner, repo } = context.repo;
          const { issues } = github.rest;
          const util = require('util');

          await issues.createComment({
            owner,
            repo,
            issue_number: ${{ github.event.issue.number }},
            body: util.format(process.env.fetch_symbol_failed_message, '${{ needs.triage.outputs.version }}', '${{ needs.triage.outputs.architecture }}')
          });
    - name: Translates
      if: steps.backtrace_parsed.outputs.backtrace
      uses: actions/github-script@v6.1.0
      with:
        script: |
          const { owner, repo } = context.repo;
          const { issues } = github.rest;
          const { execSync } = require('child_process');
          const path = require('path');
          const fs = require('fs');
          const os = require('os');
          const util = require('util');

          const bin = path.join(process.env['ANDROID_NDK_HOME'], 'toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-addr2line');
          function addr2line(lib, pc) {
            const [func, source] = execSync(`${bin} -C -f -e ${lib} ${pc}`).split(os.EOL);
            return { func, source };
          }

          const backtrace = JSON.parse('${{ steps.backtrace_parsed.outputs.backtrace }}');

          const symbols = fs.readdirSync('symbols');
          const formatted = backtrace.map(stack => {
            const lib = path.basename(stack.file);
            if (symbols.includes(lib)) {
              const { func, source} = addr2line(lib, stack.pc);
              return {
                pc: stack.pc,
                file: stack.file,
                func,
                source
              }
            }
            
            return stack;
          }).map(({ pc, func, file, source }, i) => {
            return `#${i} PC ${pc}  ${file} (${func})${source ? ` [${source}]` : ''}`;
          });

          const body = [`translated backtrace:`];
          body.push(...formatted.map(line => `  ${line}`));

          await issues.createComment({
            owner,
            repo,
            issue_number: ${{ github.event.issue.number }},
            body: util.format(process.env.translate_success_message, body.join(os.EOL))
          });
