name: '[android] [third_party] update v8'

on:
  workflow_dispatch:
    inputs:
      v8_revision:
        description: 'V8 TAG(Branch) to build'
        default: '9.7-lkgr'
        required: true
      package_path:
        description: 'Package path'
        default: '/hippy/third_party/v8'
        required: true
      build_args:
        description: 'Build args'
        default: 'is_component_build=false is_debug=false v8_use_external_startup_data=false is_official_build=true v8_enable_i18n_support=false treat_warnings_as_errors=false symbol_level=0 use_custom_libcxx=false clang_use_chrome_plugins=false use_thin_lto=false v8_enable_webassembly=false v8_monolithic=true'
        required: true
      build_target:
        description: 'Build target'
        default: 'v8_monolith'
        required: true

jobs:
  build:
    runs-on: [self-hosted, linux, trusted]
    container:
      image: ghcr.io/medns/android-release:latest # repository name must be lowercase(${{ github.repository_owner }})
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        cpu: [arm, arm64, x86, x64]
        include:
        - cpu: arm
          arch: armeabi-v7a
          host-tag: arm-linux-androideabi
        - cpu: arm64
          arch: arm64-v8a
          host-tag: aarch64-linux-android
        - cpu: x86
          arch: x86
          host-tag: i686-linux-android
        - cpu: x86_64
          arch: x86_64
          host-tag: x86_64-linux-android
    steps:
    - name: Clean up before
      shell: bash
      run: |
        shopt -s dotglob
        rm -rf *
        shopt -u dotglob
    - name: Fetch v8
      run: |
        fetch v8
        cd v8
        git checkout ${{ github.event.inputs.v8_revision }}
    - name: Sync third_party
      working-directory: ./v8
      run: |
        echo "target_os = ['android']" >> ../.gclient
        gclient sync -D
    - name: Prepare android_ndk
      working-directory: ./v8
      run: |
        if [ -d third_party/android_tools ]; then
          rm -rf third_party/android_tools
          mkdir third_party/android_tools
          ln -s $ANDROID_NDK_HOME third_party/android_tools/ndk
        fi
        if [ -f third_party/android_ndk/BUILD.gn ]; then
          cp third_party/android_ndk/BUILD.gn $ANDROID_NDK_HOME
        fi
        if [ -d third_party/android_tools -o -f third_party/android_ndk/BUILD.gn ]; then
          rm -rf third_party/android_ndk
          ln -s $ANDROID_NDK_HOME third_party/android_ndk
        fi
    - name: Fetch patch
      uses: actions/checkout@v2
      with:
        path: ${{ github.repository }}
        lfs: true
    - name: Apply patch
      working-directory: ./v8/build
      continue-on-error: true
      run: |
        git apply ../../${{ github.repository }}/.github/workflows/tools/v8_build.patch
    - name: Generate ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        gn gen out/${{ matrix.arch }} --args="target_os=\"android\" target_cpu=\"${{ matrix.cpu }}\" v8_target_cpu=\"${{ matrix.cpu }}\" android_ndk_root=\"${ANDROID_NDK_HOME}\" android32_ndk_api_level=21 android64_ndk_api_level=21 ${{ github.event.inputs.build_args }}"
    - name: Compile ${{ matrix.arch }}
      working-directory: ./v8
      run: |
        ninja -C out/${{ matrix.arch }} ${{ github.event.inputs.build_target }}
    - name: Prepare package
      working-directory: ./v8/out/${{ matrix.arch }}
      run: |
        mkdir -p artifact/include/v8 artifact/libs/${{ matrix.arch }}
        cp obj/libv8_monolith.a artifact/libs/${{ matrix.arch }}
        cp -r ../../include/* artifact/include/v8/
        cp -r gen/include/* artifact/include/v8/
        find artifact/include/v8/. ! -name "*.h" -type f -delete
    - name: Generate Readme
      uses: DamianReeves/write-file-action@v1.0
      with:
        path: ./v8/out/${{ matrix.arch }}/artifact/README.md
        contents: |
              This v8 release is auto generated by Github Action([${{ github.run_id }}][2]).

              _Do NOT modify this release manually._

              Refs: [v8/v8@${{ steps.merge_all_artifact.outputs.head_lite }}][1]

              Branch/Tag: ${{ github.event.inputs.v8_revision }}

              [1]: https://github.com/v8/v8/tree/${{ steps.merge_all_artifact.outputs.head_full }}
              [2]: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        write-mode: overwrite
    - name: Release package
      working-directory: ./v8/out/${{ matrix.arch }}
      run: |
        tar -zcvf android-${{ matrix.cpu }}.tgz -C artifact .
    - name: Publish package
      uses: zkqiang/tencent-cos-action@v0.1.0
      with:
        args: upload -r ./v8/out/${{ matrix.arch }}/android-${{ matrix.cpu }}.tgz ${{ github.event.inputs.package_path }}/${{ github.event.inputs.v8_revision }}/
        secret_id: ${{ secrets.COS_SECRET_ID }}
        secret_key: ${{ secrets.COS_SECRET_KEY }}
        bucket: ${{ secrets.COS_BUCKET }}
    - name: Clean up after
      if: ${{ always() }}
      shell: bash
      run: |
        shopt -s dotglob
        rm -rf *
        shopt -u dotglob
  notification:
    if: ${{ always() }}
    needs: [build]
    runs-on: [self-hosted, linux, trusted]
    continue-on-error: true
    env:
      WECHAT_WORK_BOT_WEBHOOK: ${{ secrets.WECHAT_WORK_BOT_WEBHOOK }}
    steps:
    - name: Wechat Work notification
      uses: chf007/action-wechat-work@1.0.5
      with:
        msgtype: markdown
        content: "Github [Action] Notification\n
        > repository: ${{ github.repository }}\n
        > workflow: ${{ github.workflow }}\n
        > result: ${{ needs.pull-request.result == 'success' && '<font color=\"info\">success</font>' || '<font color=\"warning\">failure</font>'}}\n
        > run: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
